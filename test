<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Frequency Response Chart</title>
</head>
<body>
  <h4 style="text-align: center; font-family: Arial, sans-serif; margin-bottom: 20px; color: #333;">Brüel & Kjær 5128</h4>
  <!-- Chart Container -->
  <div id="chart-container" style="position: relative; width: 100%; max-width: 800px; margin: 0 auto;">
    <canvas id="frequencyChart"></canvas>
  </div>

  <script>
    // Function to dynamically load the Chart.js library
    const loadChartJS = (callback) => {
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
      script.onload = callback;
      document.head.appendChild(script);
    };

    // Initialize the chart after the library is loaded
    const initializeChart = async () => {
      // Step 1: Load CSV Data
      async function loadCSV(file) {
        const response = await fetch(file);
        const text = await response.text();
        const rows = text.split("\n").slice(1); // Skip the header row

        const dataPoints = rows
          .filter(row => row.trim() !== "") // Exclude empty rows
          .map(row => {
            const [frequency, dB] = row.split(",").map(val => parseFloat(val.trim()));
            return { x: frequency, y: dB };
          });
        return dataPoints;
      }

      // Step 2: Create the Chart
      const dataPoints1 = await loadCSV('Skullcandy Crusher ANC 2.csv');
      const dataPoints2 = await loadCSV('Technowant preference curve.csv');

      // Custom plugin for the logo
      const logoPlugin = {
        id: 'logoPlugin',
        beforeDraw: (chart) => {
          const ctx = chart.ctx;
          const chartArea = chart.chartArea;

          const image = new Image();
          image.src = 'https://technowant.com/wp-content/uploads/2024/06/website-logo.png.webp';

          // Calculate responsive dimensions based on screen size
          const viewportWidth = window.innerWidth;
          let imgWidth, imgHeight;

          if (viewportWidth <= 480) {
            imgWidth = 50;
            imgHeight = 30;
          } else if (viewportWidth <= 768) {
            imgWidth = 80;
            imgHeight = 50;
          } else {
            imgWidth = 100;
            imgHeight = 60;
          }

          const xPos = chartArea.right - imgWidth - 10;
          const yPos = chartArea.top + 10;

          image.onload = () => {
            ctx.drawImage(image, xPos, yPos, imgWidth, imgHeight);
          };
        }
      };

      // Create the chart
      const ctx = document.getElementById('frequencyChart').getContext('2d');
      const chart = new Chart(ctx, {
        type: 'line',
        data: {
          datasets: [
            {
              label: 'Skullcandy Crusher ANC 2',
              data: dataPoints1,
              borderColor: 'rgba(75, 192, 192, 1)',
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderWidth: 2,
              pointRadius: 0,
              tension: 0.9
            },
            {
              label: 'Technowant preference curve',
              data: dataPoints2,
              borderColor: 'red',
              borderDash: [10, 5],
              borderWidth: 3,
              pointRadius: 0,
              tension: 0.4
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: true }
          },
          scales: {
            x: {
              type: 'logarithmic',
              title: {
                display: true,
                text: 'Frequency (Hz)'
              },
              min: 20,
              max: 20000,
              ticks: {
                callback: value => `${value} Hz`
              }
            },
            y: {
              title: {
                display: true,
                text: 'dB (Relative)'
              },
              min: -10,
              max: 60,
              ticks: {
                stepSize: 5
              }
            }
          }
        },
        plugins: [logoPlugin]
      });

      // Resize logic for responsiveness
      function resizeChart() {
        const chartContainer = document.getElementById('chart-container');
        const viewportWidth = window.innerWidth;

        if (viewportWidth <= 768) {
          chartContainer.style.height = '400px';
        } else if (viewportWidth <= 480) {
          chartContainer.style.height = '300px';
        } else {
          chartContainer.style.height = '500px';
        }
        chart.resize();
      }

      // Listen for resize events
      window.addEventListener('resize', resizeChart);
      resizeChart();
    };

    // Lazy load the Chart.js library and initialize the chart
    if (document.querySelector('#frequencyChart')) {
      loadChartJS(initializeChart);
    }
  </script>
</body>
</html>
